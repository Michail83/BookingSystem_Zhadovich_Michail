// <auto-generated />
using System;
using BookingSystem.DataLayer.EntityFramework;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace BookingSystem.DataLayer.Migrations
{
    [DbContext(typeof(BookingSystemDBContext))]
    [Migration("20211201135417_initial2")]
    partial class initial2
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.12")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("BookingSystem.DataLayer.EntityModels.ArtEvent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AmounOfTicket")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("IventName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Place")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ArtEvent");
                });

            modelBuilder.Entity("BookingSystem.DataLayer.EntityModels.ClassicMusic", b =>
                {
                    b.HasBaseType("BookingSystem.DataLayer.EntityModels.ArtEvent");

                    b.Property<string>("ConcertName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Voice")
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("ClassicMusics");

                    b.HasData(
                        new
                        {
                            Id = 4,
                            AmounOfTicket = 200,
                            Date = new DateTime(2021, 12, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IventName = "music1",
                            Place = "unknown",
                            ConcertName = "Bah",
                            Voice = "tenor"
                        },
                        new
                        {
                            Id = 5,
                            AmounOfTicket = 200,
                            Date = new DateTime(2021, 12, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IventName = "music2",
                            Place = "unknown",
                            ConcertName = "Babah",
                            Voice = "bas"
                        });
                });

            modelBuilder.Entity("BookingSystem.DataLayer.EntityModels.OpenAir", b =>
                {
                    b.HasBaseType("BookingSystem.DataLayer.EntityModels.ArtEvent");

                    b.Property<string>("HeadLiner")
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("OpenAirs");

                    b.HasData(
                        new
                        {
                            Id = 2,
                            AmounOfTicket = 2000,
                            Date = new DateTime(2021, 12, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IventName = "BeerFest",
                            Place = "stillInReserch",
                            HeadLiner = "aassddffgg"
                        },
                        new
                        {
                            Id = 3,
                            AmounOfTicket = 9000,
                            Date = new DateTime(2021, 12, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IventName = "BeeeerFast",
                            Place = "stillInReserchToo",
                            HeadLiner = "ggffddssaa"
                        });
                });

            modelBuilder.Entity("BookingSystem.DataLayer.EntityModels.Party", b =>
                {
                    b.HasBaseType("BookingSystem.DataLayer.EntityModels.ArtEvent");

                    b.Property<int>("AgeLimitation")
                        .HasColumnType("int");

                    b.ToTable("Parties");

                    b.HasData(
                        new
                        {
                            Id = 6,
                            AmounOfTicket = 100,
                            Date = new DateTime(2021, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IventName = "SuperParty",
                            Place = "InResearch",
                            AgeLimitation = 18
                        },
                        new
                        {
                            Id = 1,
                            AmounOfTicket = 10,
                            Date = new DateTime(2021, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IventName = "MegaParty",
                            Place = "InResearchToo",
                            AgeLimitation = 21
                        });
                });

            modelBuilder.Entity("BookingSystem.DataLayer.EntityModels.ClassicMusic", b =>
                {
                    b.HasOne("BookingSystem.DataLayer.EntityModels.ArtEvent", null)
                        .WithOne()
                        .HasForeignKey("BookingSystem.DataLayer.EntityModels.ClassicMusic", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BookingSystem.DataLayer.EntityModels.OpenAir", b =>
                {
                    b.HasOne("BookingSystem.DataLayer.EntityModels.ArtEvent", null)
                        .WithOne()
                        .HasForeignKey("BookingSystem.DataLayer.EntityModels.OpenAir", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BookingSystem.DataLayer.EntityModels.Party", b =>
                {
                    b.HasOne("BookingSystem.DataLayer.EntityModels.ArtEvent", null)
                        .WithOne()
                        .HasForeignKey("BookingSystem.DataLayer.EntityModels.Party", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
