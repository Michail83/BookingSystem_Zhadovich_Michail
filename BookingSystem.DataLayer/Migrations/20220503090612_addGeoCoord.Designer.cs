// <auto-generated />
using System;
using BookingSystem.DataLayer.EntityFramework;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace BookingSystem.DataLayer.Migrations
{
    [DbContext(typeof(BookingSystemDBContext))]
    [Migration("20220503090612_addGeoCoord")]
    partial class addGeoCoord
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.14")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("BookingSystem.DataLayer.EntityModels.ArtEvent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AmounOfTicket")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("IventName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Latitude")
                        .HasColumnType("decimal(9,6)");

                    b.Property<decimal>("Longitude")
                        .HasColumnType("decimal(9,6)");

                    b.Property<string>("Place")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ArtEvents");
                });

            modelBuilder.Entity("BookingSystem.DataLayer.EntityModels.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("TimeOfCreation")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserEmail")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Order");
                });

            modelBuilder.Entity("BookingSystem.DataLayer.EntityModels.OrderAndArtEvent", b =>
                {
                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("ArtEventId")
                        .HasColumnType("int");

                    b.Property<int>("NumberOfBookedTicket")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.HasKey("OrderId", "ArtEventId");

                    b.HasIndex("ArtEventId");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderAndArtEvents");
                });

            modelBuilder.Entity("BookingSystem.DataLayer.EntityModels.ClassicMusic", b =>
                {
                    b.HasBaseType("BookingSystem.DataLayer.EntityModels.ArtEvent");

                    b.Property<string>("ConcertName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Voice")
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("ClassicMusics");

                    b.HasData(
                        new
                        {
                            Id = 4,
                            AmounOfTicket = 200,
                            Date = new DateTime(2022, 7, 23, 16, 0, 0, 0, DateTimeKind.Unspecified),
                            IventName = "Fake classic musik  1",
                            Latitude = 53.91486434449279m,
                            Longitude = 27.584181354972173m,
                            Place = "Беларусь, Минск, проспект Независимости, 50",
                            ConcertName = "classic musik  1",
                            Voice = "tenor"
                        },
                        new
                        {
                            Id = 5,
                            AmounOfTicket = 250,
                            Date = new DateTime(2022, 8, 14, 17, 0, 0, 0, DateTimeKind.Unspecified),
                            IventName = "Fake classic musik  2",
                            Latitude = 53.91486434449279m,
                            Longitude = 27.584181354972173m,
                            Place = "Беларусь, Минск, проспект Независимости, 50",
                            ConcertName = "classic musik  2",
                            Voice = "bas"
                        });
                });

            modelBuilder.Entity("BookingSystem.DataLayer.EntityModels.OpenAir", b =>
                {
                    b.HasBaseType("BookingSystem.DataLayer.EntityModels.ArtEvent");

                    b.Property<string>("HeadLiner")
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("OpenAirs");

                    b.HasData(
                        new
                        {
                            Id = 3,
                            AmounOfTicket = 1500,
                            Date = new DateTime(2022, 12, 31, 15, 0, 0, 0, DateTimeKind.Unspecified),
                            IventName = "Fake Gorky Party",
                            Latitude = 53.90222207800099m,
                            Longitude = 27.57284678552759m,
                            Place = "Беларусь, Минск, Первомайская улица, 3А",
                            HeadLiner = "The Best Headliner"
                        },
                        new
                        {
                            Id = 2,
                            AmounOfTicket = 100,
                            Date = new DateTime(2022, 7, 25, 19, 0, 0, 0, DateTimeKind.Unspecified),
                            IventName = "Fake Avia Party",
                            Latitude = 53.96147426906447m,
                            Longitude = 27.65091340326826m,
                            Place = "Беларусь, Минский район, Боровлянский сельсовет, деревня Копище",
                            HeadLiner = "The Best Headliner2"
                        });
                });

            modelBuilder.Entity("BookingSystem.DataLayer.EntityModels.Party", b =>
                {
                    b.HasBaseType("BookingSystem.DataLayer.EntityModels.ArtEvent");

                    b.Property<int>("AgeLimitation")
                        .HasColumnType("int");

                    b.ToTable("Parties");

                    b.HasData(
                        new
                        {
                            Id = 6,
                            AmounOfTicket = 1500,
                            Date = new DateTime(2022, 10, 31, 19, 0, 0, 0, DateTimeKind.Unspecified),
                            IventName = "Fake TNT Party",
                            Latitude = 53.902375271214524m,
                            Longitude = 27.55158689814755m,
                            Place = "Беларусь, Минск, Революционная улица, 9А",
                            AgeLimitation = 18
                        },
                        new
                        {
                            Id = 1,
                            AmounOfTicket = 300,
                            Date = new DateTime(2022, 9, 25, 22, 0, 0, 0, DateTimeKind.Unspecified),
                            IventName = " Fake Макс party",
                            Latitude = 53.92206511236228m,
                            Longitude = 27.59704956223782m,
                            Place = "Беларусь, Минск, проспект Независимости, 73",
                            AgeLimitation = 21
                        });
                });

            modelBuilder.Entity("BookingSystem.DataLayer.EntityModels.OrderAndArtEvent", b =>
                {
                    b.HasOne("BookingSystem.DataLayer.EntityModels.ArtEvent", "ArtEvent")
                        .WithMany("OrderAndArtEvents")
                        .HasForeignKey("ArtEventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookingSystem.DataLayer.EntityModels.Order", "Order")
                        .WithMany("OrderAndArtEvents")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ArtEvent");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("BookingSystem.DataLayer.EntityModels.ClassicMusic", b =>
                {
                    b.HasOne("BookingSystem.DataLayer.EntityModels.ArtEvent", null)
                        .WithOne()
                        .HasForeignKey("BookingSystem.DataLayer.EntityModels.ClassicMusic", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BookingSystem.DataLayer.EntityModels.OpenAir", b =>
                {
                    b.HasOne("BookingSystem.DataLayer.EntityModels.ArtEvent", null)
                        .WithOne()
                        .HasForeignKey("BookingSystem.DataLayer.EntityModels.OpenAir", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BookingSystem.DataLayer.EntityModels.Party", b =>
                {
                    b.HasOne("BookingSystem.DataLayer.EntityModels.ArtEvent", null)
                        .WithOne()
                        .HasForeignKey("BookingSystem.DataLayer.EntityModels.Party", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BookingSystem.DataLayer.EntityModels.ArtEvent", b =>
                {
                    b.Navigation("OrderAndArtEvents");
                });

            modelBuilder.Entity("BookingSystem.DataLayer.EntityModels.Order", b =>
                {
                    b.Navigation("OrderAndArtEvents");
                });
#pragma warning restore 612, 618
        }
    }
}
